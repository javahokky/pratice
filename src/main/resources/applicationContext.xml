<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">    
        
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.hokky">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- DruidDataSource参考配置 -->
	<!-- start -->
	
	<!-- 通常来说，只需要修改initialSize、minIdle、maxActive。
		如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc_url}" />
	    <property name="username" value="${jdbc_user}" />
	    <property name="password" value="${jdbc_password}" />
	    
	    <!-- ConfigFilter的作用之一：为数据库密码提供加密功能 -->
	    <property name="filters" value="config" />
	  	<!--  配置参数，让ConfigFilter解密密码 -->
	    <property name="connectionProperties" value="config.decrypt=true" />
	
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="${initialSize}" />
	    <property name="minIdle" value="${minIdle}" /> 
	    <property name="maxActive" value="${maxActive}" />
	    <!-- maxIdle是Druid为了方便DBCP用户迁移而增加的，maxIdle是一个混乱的概念。
	             连接池只应该有maxPoolSize和minPoolSize，druid只保留了maxActive和minIdle，分别相当于maxPoolSize和minPoolSize。 -->
	
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="${maxWait}" />
	
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
	
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		
		<!-- 用来检测连接是否有效 -->
	    <property name="validationQuery" value="${validationQuery}" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="false" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
	
	    <property name="proxyFilters">
	    	<list>
	    		<ref bean="stat-filter" />
	            <ref bean="log-filter"/>
	            <ref bean="wall-filter"/>
	    	</list>
	    </property>
	    
	   	<!--  当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接。 -->
		<!-- <property name="removeAbandoned" value="true" /> 打开removeAbandoned功能
	    <property name="removeAbandonedTimeout" value="1800" /> 1800秒，也就是30分钟
	    <property name="logAbandoned" value="true" /> 关闭abanded连接时输出错误日志 -->
	   	<!--  配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。在上面的配置中，如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时的调用堆栈。 -->
	   	<!-- 配置了WebStatFilter，在内置监控页面weburi-detail.html中，查看JdbcPoolConnectionOpenCount和JdbcPoolConnectionCloseCount属性，如果不相等，就是泄漏了。 -->
	   	
	</bean>
	
	<!-- 
		打开Druid的监控统计功能
		Druid内置提供一个StatFilter，用于统计监控信息。
		通过proxyFilters属性配置
	 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 
			配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。slowSqlMillis的缺省值为3000，也就是3秒。
			slowSqlMillis修改为10秒，并且通过日志输出执行慢的SQL。
		 -->
	    <property name="slowSqlMillis" value="10000" />
	    <property name="logSlowSql" value="true" />
	    <!-- SQL合并配置 -->
	    <property name="mergeSql" value="true" />
	</bean>
	
	<!-- 配置输出日志 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
	    <!-- <property name="resultSetLogEnabled" value="false" /> -->
	</bean>
	
	<!--  配置防御SQL注入攻击 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
      	<property name="dbType" value="mysql" />
  	</bean>
  	
  	<!-- Spring关联监控配置 :Spring和Jdbc的关联监控 -->
	<!-- 方法名正则匹配拦截配置 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
  	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
	    scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>com.hokky.service.*</value>
	            <!-- <value>com.mycompany.dao.*</value> -->
	        </list>
	    </property>
	</bean>

	<aop:config>
	    <aop:advisor advice-ref="druid-stat-interceptor"
	        pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<aop:config proxy-target-class="true">
	    <aop:advisor advice-ref="druid-stat-interceptor"
	        pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- end -->
	
	
	<!-- 配置mybatis的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hokky.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务通知属性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <!-- 定义事务传播属性 -->  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="new*" propagation="REQUIRED" />  
            <tx:method name="set*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="change*" propagation="REQUIRED" />  
            <tx:method name="check*" propagation="REQUIRED" />
            <tx:method name="select*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="*" propagation="REQUIRED" />  
        </tx:attributes>  
    </tx:advice>  
  
    <!-- 配置事务切面 -->  
    <aop:config>  
        <aop:pointcut id="serviceOperation"  
            expression="execution(* com.hokky.service..*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />  
    </aop:config>
    
</beans>